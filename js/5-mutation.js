// МУТАЦИЯ В JAVASCRIPT

// ОБЩИЕ ПОНЯТИЯ
// КАК ИЗБЕЖАТЬ МУТАЦИЙ
// ПРИМЕРЫ

// ОБЩИЕ ПОНЯТИЯ
// Копирование примитивных типов происходит по значению (copy by value)
// При изменении / добавлении свойст в объект происходит мутация объекта на который ссылается переменная
// Копирование сложных типов происходит по ссылке (copy by reference)
// Мутирование копий (мутирование объекта через копию) - когда несколько переменных ссылаются на один объект в памяти, мы можем менять значения свойств объекта через все эти переменные

// КАК ИЗБЕЖАТЬ МУТАЦИЙ
// При следующих подходах  в objectB будет лежать новая ссылка на новый объект, то есть objectB !== objectA
// При изменении свойств в новом объекте, мутации оригинального объекта не происходит

console.log("--------------------------------------");
// ПРИМЕРЫ

// Вариант 1
// Частичная мутация
// assign - метод объекта Object
// Object - является частью глобального объекта (свойство глобального объекта), доступен как в Веб-браузерах, так и в Node.js
// const objectB = Object.assign({}, objectA)
// Проблематика: если у объекта есть вложенные объекты, то ссылки на них сохраняются, то есть мы избегаем мутации только корневых свойств объекта

const person = {
  name: "Bob",
  age: 25,
};

const person2 = Object.assign({}, person);

person2.age = 26;

console.log(person.age); // 25
console.log(person2.age); // 26

console.log("--------------------------------------");

// Вариант 2
// Частичная мутация
// Оператор spread - оператор разделения объекта на свойства
// Берется объект objectA и разделяется на свойства, а потом эти свойства сразу же собираются в новый объект objectB, так как указаны фигурные скобки
// Проблематика: если у объекта есть вложенные объекты, то ссылки на них сохраняются, то есть мы избегаем мутации только корневых свойств объекта

const person3 = { ...person };

person3.name = "Alis";

console.log(person.name); // Bob
console.log(person3.name); // Alis

console.log("--------------------------------------");

// Вариант 3
// Полностью избегаем мутации
// Ссылки на вложенные объекты не сохраняются
// 1 етап - конвертируем objectA в строку с помощью метода stringify
// 2 етап - полученую строку передаем как аргумент в вызове метода parse, то есть конвертируем строку обратно в объект

const person4 = JSON.parse(JSON.stringify(person));

console.log(JSON.stringify(person)); // {"name":"Bob","age":25}
console.log(JSON.parse(JSON.stringify(person))); // {name: 'Bob', age: 25}

person4.name = "Jonson";

console.log(person.name); // Bob
console.log(person4.name); // Jonson

console.log("-----------------7---------------------");