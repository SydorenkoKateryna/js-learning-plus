// ОПЕРАТОРЫ

// ОБЩИЕ ПОНЯТИЯ
// ОПЕРАТОР ПРИСВАИВАНИЯ
// УНАРНЫЕ И БИНАРНЫЕ ОПЕРАТОРЫ
// ФОРМАТЫ ЗАПИСИ ОПЕРАТОРОВ
// ПРИОРИТЕТНОСТЬ ОПЕРАТОРОВ
// ЛОГИЧЕСКИЕ ОПЕРАТОРЫ
// ЛОЖНЫЕ ЗНАЧЕНИЯ
// ПРАКТИКА С typeof ОПЕРАТОРОМ
// ОПЕРАТОР НЕ (ОПЕРАТОР ОТРИЦАНИЯ)
// ОПЕРАТОР КОРОТКОГО ЗАМЫКАНИЯ И
// ОПЕРАТОР КОРОТКОГО ЗАМЫКАНИЯ ИЛИ
// ТРЮК С ОПЕРАТОРОМ И (&&) И ВЫЗОВОМ ФУНКЦИИ
// ОПЕРАТОР РАЗДЕЛЕНИЯ ОБЪЕКТА НА СВОЙСТВА
// ОБЪЕДИНЕНИЕ ОБЪЕКТОВ С ПОМОЩЬЮ ...

// ОБЩИЕ ПОНЯТИЯ
// Оператор - это встроенная (внутренняя) функция
// Операнды (аргументы) - это то, что стоит слева и справа от оператора
// Операторы бывают:
// 1. Арифметические: +, -, *, /
// 2. Сравнения: ===, !==, <=, >=
// 3. Логические: !, &&, ||
// 4. Присваивания: =
// 5. Текстовые: typeof (проверить тип значения, рузалатом будет строка с типом значения), instanceof (проверить принадлежность объекта тому или иному класу), new, delete (удалить свойство в объекте)

// ОПЕРАТОР ПРИСВАИВАНИЯ
// function =(переменная, выражение) {
// 1. Получение результата выражения
// 2. Поиск переменной по имени
// 3. Присваивание результата выражения переменной
// 4. Возврат результата выражения
// }

// УНАРНЫЕ И БИНАРНЫЕ ОПЕРАТОРЫ
// Унарные операторы - у них всегда один операнд (аргумент): а++, +а, delete obj.a, typeof a, new Object()
// Бинарные операторы - у них всегда два операнда (аргумента): a = 5, a + b, a += 5, a === b, a && b

// ФОРМАТЫ ЗАПИСИ ОПЕРАТОРОВ
// Инфиксная запись - оператор находится между операндами: a = true, a + b, a += 5, a || b, a > b
// Префиксная запись - оператор стоит перед операндом: ++а, delete obj.a, typeof a
// Постфиксная запись - оператор идет за операндом: а++, myFunction() - круглые скобки это тоже оператор в JS, то есть имя ф-ции это операнд

// ПРИОРИТЕТНОСТЬ ОПЕРАТОРОВ
// Работают правила с курса математики в средней школе ^-^
// Можно добавить круглые скобки для изменения приоритетности выполнения или для большей наглядности

// ЛОГИЧЕСКИЕ ОПЕРАТОРЫ
// ! - НЕ - всегда возвращает значение типа boolean независимо от значения операнда
// && - И - возвращает значение одного из операндов
// || - ИЛИ - возвращает значение одного из операндов

// ЛОЖНЫЕ ЗНАЧЕНИЯ
// Это те значения, который при привидении к логическому типу boolean дают false. Если получаем true, значение неложное, оно истинное
// Boolean(value) ---> false
console.log(Boolean(false)); // false
console.log(Boolean(0)); // false
console.log(Boolean("")); // false
console.log(Boolean(undefined)); // false
console.log(Boolean(null)); // false

// ПРАКТИКА С typeof ОПЕРАТОРОМ
console.log(typeof "Kate"); // 'string'
console.log(typeof false); // 'boolean'
console.log(typeof 0); // 'number'
console.log(typeof 10 === "number"); // true

let isUndefined;
console.log(typeof isUndefined === "undefined"); // true

// ОПЕРАТОР НЕ (ОПЕРАТОР ОТРИЦАНИЯ)
// Оператор ! чаще всего используется в условных инструкциях (if, if else и т.д.)
console.log(!10); // false
console.log(!0); // true
// Отрицание отрицания !! позволяет проверить ложность значения
console.log(!!10); // true
console.log(!!0); // false

const emptyObject = {};

console.log(!!emptyObject); // true

// ОПЕРАТОР КОРОТКОГО ЗАМЫКАНИЯ И
// Оператор И (&&) требует правдивости обоих операндов (ищет первое ложное значение)
// Выражение 1 && Выражение 2
// Если "Выражение 1" ложно: "Выражение 2" игнорируется; возвращается результат "Выражения 1"
// Если "Выражение 1" истинно -> оценивается "Выражение 2"
// Если "Выражение 2" ложно: возвращается результат "Выражения 2"
// Если "Выражение 2" истинно: возвращается результат "Выражения 2"

// ОПЕРАТОР КОРОТКОГО ЗАМЫКАНИЯ ИЛИ
// Оператор ИЛИ (||) требует правдивости одного из операндов (ищет первое истинное значение)
// Выражение 1 || Выражение 2
// Если "Выражение 1" истинно: "Выражение 2" игнорируется; возвращается результат "Выражения 1"
// Если "Выражение 1" ложно -> оценивается "Выражение 2"
// Если "Выражение 2" ложно: возвращается результат "Выражения 2"
// Если "Выражение 2" истинно: возвращается результат "Выражения 2"

console.log(0 & undefined); // 0
console.log(0 & 5); // 0
console.log(0 || undefined); // undefined
console.log(0 || 5); // 5
console.log(5 || undefined); // 5
console.log(5 || (undefined && 0)); // 5
console.log((5 || undefined) && 0); // 0

// ТРЮК С ОПЕРАТОРОМ И (&&) И ВЫЗОВОМ ФУНКЦИИ
let y = 10;
y && console.log("Выполнено!"); // Выполнено!

let r;
r && console.log("Выполнено!"); // undefined
// На месте console.log может быть любая ф-ция. С помощью такого подхода можно условно вызывать те или иные ф-ции, вызывать в зависимости от того, какие значения есть у тех или других переменных

console.log("--------------------------------------");

// ОПЕРАТОР РАЗДЕЛЕНИЯ ОБЪЕКТА НА СВОЙСТВА
// Оператор ... (три точки, spread) - это префексный и унарный оператор
const button = {
  width: 200,
  text: "Buy",
};

const redButton = {
  ...button, // разделяем объект button на свойства
  color: "red", // если у объекта button есть свойство color, его значение будет перезаписано на новое, если color идет после распыления, а если color идет до распыление, перезапишется значение свойства с исходного объекта
};

console.table(redButton);

console.log("--------------------------------------");

// ОБЪЕДИНЕНИЕ ОБЪЕКТОВ С ПОМОЩЬЮ ...
// Порядок передачи данных важен, так как одинаковые свойства будут перезаписаны
const buttonInfo = {
  text: "Buy",
};

const buttonStyle = {
  color: "yellow",
  width: 200,
  height: 300,
};

const newButton = {
  ...buttonInfo,
  ...buttonStyle,
};

console.table(newButton);
