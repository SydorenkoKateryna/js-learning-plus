// ПЕРЕМЕННЫЕ

// ИМЕНА ПЕРЕМЕННЫХ
// ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ
// ТИПЫ ПЕРЕМЕНННОЙ
// ДИНАМИЧЕСКАЯ ТИПИЗАЦИЯ
// ПРАВИЛА РАБОТЫ С ПЕРЕМЕННЫМИ

// Переменные дают возможность ПОВТОРНОГО доступа к значениям (это как контейнеры для хранения значений)

// ИМЕНА ПЕРЕМЕННЫХ
// PascalCase - типы и классы
// DB_PASSWORD - значения известны до запуска приложения и не меняются (константы)
// camelCase - все остальные переменные

// ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ
// let - можно переприсваивать переменной другие значения; можно сначала объявить переменную, а потом присвоить ей значение (до присвоения значение переменной будет undefined)
// const - нужно в одной строке сразу обьявить и присвоить значение переменной; новое значение нельзя присвоить
// var - присутсвовал в JS с самого начала, не рекомендуется сейчас к использованию

// let и const появились ECMAScript6 (стандарт JS (2015 год), который описывает полностью все ф-ции JS, а уже различные браузеры, node.js применяют этот стандарт)

// let a - объявление
// const c = 10 - объявление и присваивание
// a = true - присваивание

// console.log(a);
// ReferenceError: a is not defined

let a;
console.log(a);
// undefined
a = true;
console.log(a);
// true

// ТИПЫ ПЕРЕМЕНННОЙ
// Тип переменной определяется типом приисвоенного значения

// ПРИМИТИВНЫЕ ТИПЫ: string (строка), boolean (логический), number (число), null (значение отсутствует; можем присвоить самостоятельно, а потом переприсвоить значение), undefined (значения не существует -> неопределено, сами обычно не присваиваем), symbol (символ)
// Примитивные типы - переменная в памяти содержит то или иное значение

// ССЫЛОЧНЫЙ ТИП - object (объект)
// Ссылочный тип - переменная в памяти содержит ссылку на объект, который находится в другом месте (на область в памяти где находится сам объект)

const objectA = {
  a: 10,
  b: true,
};

console.log(objectA);

const copyOfA = objectA;
// копируем ссылку на объект

console.log(copyOfA);

console.log(objectA === copyOfA);
// true - содержат ссылку на один и тот же объект

copyOfA.c = "abc";
// изменения будут в обоих переменных

console.log(objectA);
console.log(copyOfA);

// ДИНАМИЧЕСКАЯ ТИПИЗАЦИЯ
// Статическая типизаци - это когда при объявлении переменной так же указывается тип переменной. Попытка переприсвоить переменной значение другого типа вызовет ошибку.
// Динамическая типизация - в JS нет необходимости указывать тип переменной, когда мы объявляем переменную либо присваиваем ей значение. Можна переприсвоить переменной значение другого типа.
// JAVASCRIPT - динамически типизируемый язык

function d() {
  console.log("Hey there");
}

d();
// Вызов ф-ции, все хорошо

d = 10;
// переменной d присвоили значение типа число

// d();
// Вызов ф-ции, будет ошибка Uncaught TypeError: d is not a function

// const - позволяет предотвратить возможные проблемы связанные с динамической типизацией

const f = () => {
  console.log("Hey there");
};

f();

// f = 10;
// Ошибка будет уже на этом этапе, потому что просваивать новое значение переменным объявленным при помощи const запрещено (TypeError: Assignment to constant variable)

f();
// Выволнение кода не дойдет до этой строки

// ПРАВИЛА РАБОТЫ С ПЕРЕМЕННЫМИ
// 1. Все переменные объявлять перед их использованием
// 2. Стараться использовать const везде, где это возможно
