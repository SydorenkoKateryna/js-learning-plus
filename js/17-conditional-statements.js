// УСЛОВНЫЕ ИНСТРУКЦИИ

// ИНСТРУКЦИЯ if
// ИНСТРУКЦИЯ if С ОПЕРАТОРОМ ОТРИЦАНИЯ
// УСЛОВНАЯ ИНСТРУКЦИЯ if else
// ИНСТРУКЦИЯ if else if
// ПРЕДПОЧТИТЕЛЬНЫЙ ФОРМАТ if
// ИСПОЛЬЗОВАНИЕ if В ФУНКЦИЯХ
// ИНСТРУКЦИЯ switch
// ТЕРНАРНЫЙ ОПЕРАТОР

// ИНСТРУКЦИЯ if
// if (Условие) {
// Блок кода, выполняемый однократно, если Условие правдиво
// }

let val = 10;

if (val > 5) {
  val += 20;
}

console.log(val); // 30

const person = {
  age: 20,
};

// ИНСТРУКЦИЯ if С ОПЕРАТОРОМ ОТРИЦАНИЯ
if (!person.name) {
  console.log("Имя не указано");
  // Другие действия в случае, если свойства "name" у объекта "person" нету или его значение ложно
  // !undefined === true
}

// УСЛОВНАЯ ИНСТРУКЦИЯ if else
// if (Условие) {
// Блок кода, выполняемый однократно, если Условие правдиво
// } else {
// Блок кода, выполняемый однократно, если Условие ложно
// }

// Выполнится только один из блоков, одновременно выполниться два блока кода не могут

if (val < 5) {
  val += 20;
} else {
  val -= 20;
}

console.log(val); // 10

// ИНСТРУКЦИЯ if else if
// if (Условие 1) {
// Блок кода, выполняемый однократно, если Условие 1 правдиво
// } else if {
// Блок кода, выполняемый однократно, если Условие 2 правдиво
// } else {
// Блок кода, выполняемый однократно, если предыдущие условия ложны
// }

const age = 25;

if (age >= 18) {
  console.log("Is adult");
} else if (age >= 12) {
  console.log("Is teenager");
} else {
  console.log("Is child");
}

// ПРЕДПОЧТИТЕЛЬНЫЙ ФОРМАТ if
// Более читабельный, но нужно учитывать предыдущие условия, если хотим выполнить только один из блоков кода

// if (Условие 1) {
// Блок кода, выполняемый однократно, если Условие 1 правдиво
// }

// if (Условие 2) {
// Блок кода, выполняемый однократно, если Условие 2 правдиво
// }

// if (Условие 3) {
// Блок кода, выполняемый однократно, если Условие 3 правдиво
// }

if (age >= 18) {
  console.log("Is adult");
}

if (age >= 12 && age < 18) {
  console.log("Is teenager");
}
if (age < 12) {
  console.log("Is child");
}

// ИСПОЛЬЗОВАНИЕ if В ФУНКЦИЯХ
// Условная инструкция if помогает возвращать разные значения из функции в зависимости от тех или иных условий
const sumPositiveNumbers = (a, b) => {
  if (typeof a !== "number" || typeof b !== "number") {
    return "One of the arguments is not a number";
  }
  if (a <= 0 || b <= 0) {
    return "Numbers are not positive";
  }

  return a + b;
};

console.log(sumPositiveNumbers("a", true)); // One of the arguments is not a number
console.log(sumPositiveNumbers(-10, 5)); // Numbers are not positive
console.log(sumPositiveNumbers(3, 8)); // 11

// ИНСТРУКЦИЯ switch
// Альтернатива if else if
// break - выход из условной инструкции switch (если не написать break, то даже если Выражение === какому-то из кейсов, мы продолжим анализировать другие кейсы)

// switch (Выражение) {
// case A:
// Действия если Выражение === А
// break;
// case B:
// Действия если Выражение === В
// break;
// default:
// Действия по умолчанию
// }

const month = 2;

switch (month) {
  case 12:
    console.log("December");
    break;
  case 1:
    console.log("January");
    break;
  case 2:
    console.log("February");
    break;
  default:
    console.log("It is not a winter month");
}

// ТЕРНАРНЫЙ ОПЕРАТОР
// У тернарного оператора три операнда
// Конструкция с тернарным оператором - это выражение-инструкция,а выражение всегда возвращает значение

// Формат записи:
// Условие ? Выражение 1 : Выражение 2
// либо (более предпочтительный вариант записи)
// Условие
//  ? Выражение 1
//  : Выражение 2

// В зависимости от Условия возвращается либо Выражение 1, либо Выражение 2
// Условие - любые подходящие выражения, которые возвращают значение
// Выражение 1 - если условие правдиво, тогда возвращается результат Выражения 1
// Выражение 2 - если условие ложно, тогда возвращается результат Выражения 2

// Пример 1
const value = 11;

value ? console.log("Условие истинно") : console.log("Условие ложно"); // Условие истинно, так как значение value правдиво

const a = value ? console.log("Условие истинно") : console.log("Условие ложно");
console.log(a); // Выведет в консоль - Условие истинно, но сам метод log вернет значение undefined, то есть в переменную а запишется результат вызова функции и это будет undefined

// Так как вызов функции - это выражение, мы можем вызывать функции в конструкции с тернарным оператором
// value1 && value2 ? myFunction1(value1, value2) : myFunction2()

// Пример 2
// Возвращает значение
let newValue = 11;
console.log(newValue >= 0 ? value : -value); // 11

// Присваивание результата переменной
newValue = -5;
const res = newValue >= 0 ? newValue : -newValue;
console.log(res); // 5
